{"ast":null,"code":"var _jsxFileName = \"/home/hamna/weathersamp1/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Search from './components/Search';\nimport { weatherForecast } from './Api';\nimport Weather from './components/Weather';\nimport Loader from './components/Loader';\n\nfunction App() {\n  const [state, setState] = useState({\n    value: '',\n    current: {},\n    weekInfo: [],\n    loading: false,\n    error: false\n  });\n\n  const handleInputChange = e => {\n    setState({ ...state,\n      value: e.target.value\n    });\n  };\n\n  const handleSearchCity = e => {\n    e.preventDefault();\n    setState({ ...state,\n      loading: true\n    });\n    axios.get(weatherForecast(state.value)).then(response => {\n      const data = response.data;\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'Nocvember', 'December'];\n      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      const currentDate = new Date();\n      const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${months[currentDate.getMonth()]}`;\n      const sunset = new Date(data.list[0].sunset * 1000).toLocaleTimeString().slice(0, 4);\n      const sunrise = new Date(data.list[0].sunrise * 1000).toLocaleTimeString().slice(0, 4);\n      const current = {\n        city: data.city.name,\n        country: data.city.country,\n        date,\n        population: data.city.population,\n        desc: data.list[0].weather[0].description,\n        main: data.list[0].weather[0].main,\n        icon: data.list[0].weather[0].icon,\n        temp: data.list[0].temp.day,\n        hTemp: data.list[0].temp.max,\n        lTemp: data.list[0].temp.min,\n        sunrise,\n        sunset,\n        clouds: data.list[0].clouds,\n        humidity: data.list[0].humidity,\n        wind: data.list[0].speed,\n        pressure: data.list[0].pressure\n      };\n      const weekData = data.list;\n      const weekInfo = weekData.map((data, index) => {\n        return {\n          key: index,\n          main: data.weather[0].main,\n          day: new Date(data.dt * 1000).toLocaleString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          }).slice(0, 3),\n          desc: data.weather[0].description,\n          icon: data.weather[0].icon,\n          hTemp: data.temp.max,\n          lTemp: data.temp.min\n        };\n      });\n      setState({ ...state,\n        current,\n        weekInfo,\n        loading: false,\n        error: false\n      });\n    }).catch(error => {\n      console.log(error);\n      setState({ ...state,\n        loading: false,\n        error: true,\n        current: {},\n        weekInfo: []\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n    value: state.value,\n    data: state,\n    showResult: (state.weatherInfo || state.error) && true,\n    change: handleInputChange,\n    submit: handleSearchCity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), state.loading === true ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, state.current.country !== undefined ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Weather, {\n    today: state.current,\n    weekly: state.weekInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })) : state.error ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error__loc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"Sorry! we donot have any information on specified location.\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hamna/weathersamp1/src/App.js"],"names":["React","useState","axios","Search","weatherForecast","Weather","Loader","App","state","setState","value","current","weekInfo","loading","error","handleInputChange","e","target","handleSearchCity","preventDefault","get","then","response","data","months","days","currentDate","Date","date","getDay","getDate","getMonth","sunset","list","toLocaleTimeString","slice","sunrise","city","name","country","population","desc","weather","description","main","icon","temp","day","hTemp","max","lTemp","min","clouds","humidity","wind","speed","pressure","weekData","map","index","key","dt","toLocaleString","weekday","year","month","catch","console","log","weatherInfo","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport axios  from \"axios\";\nimport Search from './components/Search';\nimport {weatherForecast} from './Api'\nimport Weather from './components/Weather';\nimport Loader from './components/Loader';\n\nfunction App() {\n  const [state, setState] = useState({\n    value: '',\n    current: {\n    },\n    weekInfo: [],\n    loading: false,\n    error: false,\n  })\n  \n  const handleInputChange = e => {\n    setState({\n      ...state,\n      value: e.target.value,\n    })\n  };\n\n  const handleSearchCity = e => {\n    e.preventDefault();\n    setState({\n      ...state,\n      loading: true,\n    })\n    axios.get(weatherForecast(state.value))\n    .then(response => {\n      const data = response.data\n      const months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'Nocvember',\n        'December',\n      ]\n\n      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n      const currentDate = new Date()\n      const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n        months[currentDate.getMonth()]\n      }`;\n\n      const sunset = new Date(data.list[0].sunset * 1000).toLocaleTimeString().slice(0, 4)\n      const sunrise = new Date(data.list[0].sunrise * 1000).toLocaleTimeString().slice(0, 4)\n\n      const current = {\n        city: data.city.name,\n        country: data.city.country,\n        date,\n        population: data.city.population,\n        desc: data.list[0].weather[0].description,\n        main: data.list[0].weather[0].main,\n        icon: data.list[0].weather[0].icon,\n        temp: data.list[0].temp.day,\n        hTemp: data.list[0].temp.max,\n        lTemp: data.list[0].temp.min,\n        sunrise,\n        sunset,\n        clouds: data.list[0].clouds,\n        humidity: data.list[0].humidity,\n        wind: data.list[0].speed,\n        pressure: data.list[0].pressure,\n      }\n\n      const weekData = data.list\n      const weekInfo = weekData.map((data, index) => {\n        return{\n          key:index,\n          main: data.weather[0].main,\n          day: new Date(data.dt * 1000).toLocaleString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }).slice(0,3),\n          desc: data.weather[0].description,\n          icon: data.weather[0].icon,\n          hTemp: data.temp.max,\n          lTemp: data.temp.min,\n        }})\n\n      setState({\n        ...state,\n        current,\n        weekInfo,\n        loading: false,\n        error: false,\n      })\n      \n      })\n      .catch(error => {\n        console.log(error);\n\n        setState({\n          ...state,\n          loading: false,\n          error: true,\n          current: {},\n          weekInfo: [],\n        })\n      })\n    }\n\n  return (\n    <>\n      <Search \n        value={state.value}\n        data = {state}\n        showResult={(state.weatherInfo || state.error) && true}\n        change={handleInputChange}\n        submit={handleSearchCity} \n      />\n      {\n        state.loading === true ? \n        <Loader /> :\n      <div>  \n        {state.current.country !== undefined ? \n        <div className=\"weather\">\n          <Weather today={state.current} weekly={state.weekInfo} />\n        </div> : \n        state.error ? \n        <p className=\"error__loc\">Sorry! we donot have any information on specified location.</p> :\n        <div>\n\n        </div>\n        }\n      </div>\n      }\n    </>\n  )\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}